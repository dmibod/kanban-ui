{"version":3,"sources":["api.js","serviceWorker.js","actions/index.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","containers/AddTodo.js","components/App.js","enhancers/monitorReducer.js","middleware/logger.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","index.js","configureStore.js"],"names":["host","api","concat","wsapi","Boolean","window","location","hostname","match","addTodoStarted","text","type","addTodoSuccess","id","addTodoFailure","error","removeTodoStarted","removeTodoSuccess","removeTodoFailure","VisibilityFilters","Todo","_ref","onClick","onTrash","selected","react_default","a","createElement","className","style","width","height","display","overflow","TodoList","todos","toggleTodo","removeTodo","map","todo","components_Todo","Object","assign","key","getVisibleTodos","filter","t","completed","Error","connect","state","visibilityFilter","dispatch","fetch","method","then","res","catch","err","message","input","onSubmit","e","preventDefault","value","trim","body","JSON","stringify","name","json","data","ref","node","App","containers_AddTodo","VisibleTodoList","monitorReducerEnhancer","createStore","reducer","initialState","enhancer","action","number","start","performance","now","newState","end","diff","Math","round","console","log","logger","store","next","group","info","result","getState","groupEnd","arguments","length","undefined","toConsumableArray","objectSpread","combineReducers","response","boards","board","preloadedState","middlewares","loggerMiddleware","thunkMiddleware","enhancers","applyMiddleware","apply","composedEnhancers","composeWithDevTools","rootReducer","configureStore","subscribe","handleChange","render","es","src_components_App","document","getElementById","currentValue","sharedWorker","previousValue","cmd","port","postMessage","postCommands","payload","lane_id","conn","WebSocket","onclose","evt","onmessage","SharedWorker","addEventListener","event","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84bc8b72.chunk.js","sourcesContent":["const secure = 's';\r\nconst host = 'dmitrybodnar.com';\r\n//const secure = '';\r\n//const host = 'localhost:8080';\r\nexport const api = `http${secure}://${host}`;\r\nexport const wsapi = `ws${secure}://${host}`;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { api } from '../api';\r\n\r\nexport const addTodo = text => {\r\n  return dispatch => {\r\n    dispatch(addTodoStarted(text));\r\n\r\n    fetch(`${api}/v1/api/board`, {\r\n      method: 'post',\r\n      body: JSON.stringify({ name: text })\r\n    })\r\n      .then(res => {\r\n        return res.json()\r\n      })\r\n      .then(data => {\r\n        dispatch(addTodoSuccess(data.id, text));\r\n      })\r\n      .catch(err => {\r\n        dispatch(addTodoFailure(err.message));\r\n      });\r\n  };\r\n};\r\n\r\nexport const addTodoStarted = text => ({\r\n  type: 'ADD_TODO_STARTED',\r\n  text\r\n});\r\n\r\nexport const addTodoSuccess = (id, text) => ({\r\n  type: 'ADD_TODO_SUCCESS',\r\n  id,\r\n  text\r\n});\r\n\r\nexport const addTodoFailure = error => ({\r\n  type: 'ADD_TODO_FAILURE',\r\n  error\r\n});\r\n\r\nexport const removeTodo = id => {\r\n  return dispatch => {\r\n    dispatch(removeTodoStarted(id));\r\n\r\n    fetch(`${api}/v1/api/board/${id}`, {\r\n      method: 'delete'\r\n    })\r\n      .then(res => {\r\n        dispatch(removeTodoSuccess(id));\r\n      })\r\n      .catch(err => {\r\n        dispatch(removeTodoFailure(id, err.message));\r\n      });\r\n  };\r\n};\r\n\r\nexport const removeTodoStarted = id => ({\r\n  type: 'REMOVE_TODO_STARTED',\r\n  id\r\n});\r\n\r\nexport const removeTodoSuccess = id => ({\r\n  type: 'REMOVE_TODO_SUCCESS',\r\n  id\r\n});\r\n\r\nexport const removeTodoFailure = (id, error) => ({\r\n  type: 'REMOVE_TODO_FAILURE',\r\n  id,\r\n  error\r\n});\r\n\r\nexport const setVisibilityFilter = filter => ({\r\n  type: 'SET_VISIBILITY_FILTER',\r\n  filter\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n  type: 'TOGGLE_TODO',\r\n  id\r\n});\r\n\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: 'SHOW_ALL',\r\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\r\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Todo = ({ onClick, onTrash, id, text, selected }) => (\r\n  <div id=\"{id}\" className=\"card-wrapper float-left m-3\" onClick={onClick}>\r\n    <div className=\"card shadow\" style={{ width: '150px', height: '150px' }}>\r\n      <div className=\"card-header\">\r\n        <div className=\"card-title mb-0\">{text}</div>\r\n        <div className=\"text-white position-absolute card-badges card-badges-left\">\r\n          <div className=\"bg-success shadow-sm m-1 p-1 text-center small rounded-circle card-badge\" style={{ display: selected ? 'block' : 'none' }}>\r\n            <i className=\"fa fa-fw fa-check\"/>\r\n          </div>\r\n          <div className=\"bg-danger shadow-sm m-1 p-1 text-center small rounded-circle card-badge hover-card-badges\" onClick={onTrash}>\r\n            <i className=\"fa fa-fw fa-trash\"/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"card-body py-2\" style={{ overflow: 'hidden' }}>\r\n        <div className=\"card-text small text-justify\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nTodo.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  onTrash: PropTypes.func.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  selected: PropTypes.bool.isRequired,\r\n  text: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos, toggleTodo, removeTodo }) => (\r\n  <div className=\"lane-wrapper lane-item\">\r\n    <div className=\"lane-body\">\r\n      {todos.map(todo => (\r\n        <Todo key={todo.id} {...todo} onTrash={() => removeTodo(todo.id)} onClick={() => toggleTodo(todo.id)} />\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      selected: PropTypes.bool.isRequired,\r\n      text: PropTypes.string.isRequired\r\n    }).isRequired\r\n  ).isRequired,\r\n  toggleTodo: PropTypes.func.isRequired,\r\n  removeTodo: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TodoList;\r\n","import { connect } from 'react-redux'\r\nimport { toggleTodo, removeTodo } from '../actions'\r\nimport TodoList from '../components/TodoList'\r\nimport { VisibilityFilters } from '../actions'\r\n\r\nconst getVisibleTodos = (todos, filter) => {\r\n  switch (filter) {\r\n    case VisibilityFilters.SHOW_ALL:\r\n      return todos\r\n    case VisibilityFilters.SHOW_COMPLETED:\r\n      return todos.filter(t => t.completed)\r\n    case VisibilityFilters.SHOW_ACTIVE:\r\n      return todos.filter(t => !t.completed)\r\n    default:\r\n      throw new Error('Unknown filter: ' + filter)\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  todos: getVisibleTodos(state.todos, state.visibilityFilter)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  toggleTodo: id => dispatch(toggleTodo(id)),\r\n  removeTodo: id => dispatch(removeTodo(id))\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoList)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from '../actions';\r\n\r\nconst AddTodo = ({ dispatch }) => {\r\n  let input;\r\n\r\n  return (\r\n    <div  className=\"d-flex flex-row ml-3 mt-4\">\r\n    <form\r\n      onSubmit={e => {\r\n        e.preventDefault();\r\n        if (!input.value.trim()) {\r\n          return;\r\n        }\r\n        dispatch(addTodo(input.value));\r\n        input.value = '';\r\n      }}\r\n    >\r\n      <div className=\"input-group mb-3\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          ref={node => (input = node)}\r\n        />\r\n        <div className=\"input-group-append\">\r\n          <button\r\n            className=\"btn btn-primary\"\r\n            type=\"submit\"\r\n            id=\"button-add\"\r\n          >\r\n            Add Board\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect()(AddTodo);\r\n","import React from 'react';\nimport './App.css';\n//import Footer from './Footer'\nimport VisibleTodoList from '../containers/VisibleTodoList'\nimport AddTodo from '../containers/AddTodo';\n\nconst App = () => (\n  <div>\n    <AddTodo />\n    <VisibleTodoList />\n    {/* <Footer /> */}\n  </div>\n)\n\nexport default App;\n","const round = number => Math.round(number * 100) / 100\r\n\r\nconst monitorReducerEnhancer = createStore => (\r\n  reducer,\r\n  initialState,\r\n  enhancer\r\n) => {\r\n  const monitoredReducer = (state, action) => {\r\n    const start = performance.now()\r\n    const newState = reducer(state, action)\r\n    const end = performance.now()\r\n    const diff = round(end - start)\r\n\r\n    console.log('reducer process time:', diff)\r\n\r\n    return newState\r\n  }\r\n\r\n  return createStore(monitoredReducer, initialState, enhancer)\r\n}\r\n\r\nexport default monitorReducerEnhancer","const logger = store => next => action => {\r\n  console.group(action.type)\r\n  console.info('dispatching', action)\r\n  let result = next(action)\r\n  console.log('next state', store.getState())\r\n  console.groupEnd()\r\n  return result\r\n}\r\n\r\nexport default logger","const todos = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TODO_STARTED':\r\n      return state;\r\n    case 'ADD_TODO_SUCCESS':\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          completed: false\r\n        }\r\n      ];\r\n    case 'ADD_TODO_FAILURE':\r\n      return state;\r\n    case 'REMOVE_TODO_STARTED':\r\n      return state;\r\n    case 'REMOVE_TODO_SUCCESS':\r\n      return state.filter(todo => todo.id !== action.id);\r\n    case 'REMOVE_TODO_FAILURE':\r\n      return state;\r\n    case 'TOGGLE_TODO':\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, selected: !todo.selected } : todo\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todos;\r\n","import { VisibilityFilters } from '../actions'\r\n\r\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\r\n  switch (action.type) {\r\n    case 'SET_VISIBILITY_FILTER':\r\n      return action.filter\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default visibilityFilter","import { combineReducers } from 'redux'\r\nimport todos from './todos'\r\nimport visibilityFilter from './visibilityFilter'\r\n\r\nexport default combineReducers({\r\n  todos,\r\n  visibilityFilter\r\n})","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { api, wsapi } from './api';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\nimport configureStore from './configureStore';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nlet store;\n\nfetch(`${api}/v1/api/board`)\n  .then(response => response.json())\n  .then(boards => {\n    let state = {\n      todos: boards.map(board => {\n        return { id: board.id, text: board.name, selected: false };\n      })\n    };\n\n    store = configureStore(state);\n\n    //const unsubscribe =\n    store.subscribe(handleChange);\n    //unsubscribe();\n\n    render(\n      <Provider store={store}>\n        <App />\n      </Provider>,\n      document.getElementById('root')\n    );\n  });\n\nlet currentValue = [];\nlet sharedWorker = null;\n\nfunction handleChange() {\n  let previousValue = currentValue;\n  currentValue = store.getState().todos;\n  if (currentValue.length > previousValue.length) {\n    let cmd = [\n      {\n        id: '5c3016bc4d74f1000177ed11',\n        type: 5,\n        payload: {\n          lane_id: '5c30169d4d74f1000177ed10'\n        }\n      }\n    ];\n    postCommands(cmd);\n  }\n}\n\n(function() {\n  let conn = new WebSocket(`${wsapi}/v1/api/notify/ws`);\n  conn.onclose = function(evt) {\n    console.log('Connection closed');\n  };\n  conn.onmessage = function(evt) {\n    console.log('notification received', evt.data);\n  };\n})();\n\nfunction postCommands(cmd) {\n  console.log('post commands: ', cmd);\n  if (!sharedWorker) {\n    console.log('shared worker is not available');\n    return;\n  }\n  console.log('commands posted to shared worker');\n  sharedWorker.port.postMessage(cmd);\n}\n\nif (window.SharedWorker) {\n  sharedWorker = new SharedWorker('worker.js');\n  sharedWorker.port.start();\n  console.log('shared worker is started');\n  sharedWorker.port.addEventListener('message', event => {\n    console.log('message received by main is...');\n    console.log(event.data);\n  });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { applyMiddleware, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport monitorReducerEnhancer from './enhancers/monitorReducer'\r\nimport loggerMiddleware from './middleware/logger'\r\nimport rootReducer from './reducers'\r\n\r\nexport default function configureStore(preloadedState) {\r\n  const middlewares = [loggerMiddleware, thunkMiddleware]\r\n  const middlewareEnhancer = applyMiddleware(...middlewares)\r\n\r\n  const enhancers = [middlewareEnhancer, monitorReducerEnhancer]\r\n  const composedEnhancers = composeWithDevTools(...enhancers)\r\n\r\n  const store = createStore(rootReducer, preloadedState, composedEnhancers)\r\n\r\n  return store\r\n}\r\n\r\n"],"sourceRoot":""}